2
3
2+3
x1<-c(2,4,7,12)
c(1)
c(3)
class(c)
class(x1)
class(x1)
x1(2,5,1,4,6,3,4,6,9)
x1(2,5,1,4,6,3,4,6,9)
x1<-c(2,5,1,4,6,3,4,6,9)
class(x1)
mode(x1)
mode(x1)class(x1)<-"integer"
class(x1)<-"integer"
mode(x1)<-"integer"
class(x1)
mode(x1)
x1<-c(1l,2l)
x1<-c(1L,2L)
class(x1)
A<-c(1,2,34,5,6,"a")
A
numeric(x1)
numerc(A)
numeric(A)
is.numeric(A)
is.character(A)
B<-c(,2,3,4,5)
is.integer(B)
B<-c(1,2,3,4,5)
is.integer(B)
is.numeric(B)
as.integer(B)
class(B)
class(B)<-"numeric"
B
A
class(A)<-"numeric"
class(A)
A
w<-c("a","b","c","d")
W[1]
class(w)
seq(1,15)
seq(1,15)
seq(1,15,0,5)
z<-seq(1,15,4)
z
seq(1,20,0.5)
w<-c("a","b","c","d")
max(A)
max(B)
min(B)
sum(B)
library(sqldl)
install.packages("dplyr")
library(sqldf)
library(sqldf)
library(sqldf)
library(dplyr)
library(sqldf)
path2data<-file.path()
path2data<-file.path(iris.csv)
path2data <- file.path(file.choose())
path2data
View(iris_setosa)
View(iris)
#'Load all variables from the `iris.csv` dataset where `Species = "setosa"`
#+ message = F, warning = F
iris_setosa <- read.csv.sql(file.path(path2data)
, "SELECT *
FROM file
WHERE Species = 'setosa'")
View(iris_setosa)
#'Load only Sepal.Length and Species from the `iris.csv` dataset where `Species = "setosa"`
#+ message = F, warning = F
iris_setosa_sepallength <- read.csv.sql(file.path(path2data)
, "SELECT `Sepal.Length`, Species
FROM file
WHERE Species = 'setosa'")
head(iris_setosa)
#'Load only Sepal.Length and Species from the `iris.csv` dataset where `Species = "setosa"`
#+ message = F, warning = F
iris_setosa_sepallength <- read.csv.sql(file.path(path2data)
, "SELECT `Sepal.Length`, Species
FROM file
WHERE Species = 'setosa'")
(file.path(path2data)
, "SELECT `Sepal.Length`, Species
FROM file
WHERE Species = 'setosa'")
iris_setosa_sepallength <- read.csv.sql(file.path(path2data)
, "SELECT `Sepal.Length`, Species
FROM file
WHERE Species = 'setosa'")
head(iris_setosa_sepallength)
head(iris_setosa_sepallength)
View(iris_setosa)
#'Remove all unnecessary variables in the Global Environment
#+
rm(list = c("iris_setosa", "iris_setosa_sepallength"))
iris_all <- read.csv.sql(file.path(path2data)
, sql = "SELECT *
FROM file")
head(iris_all)
sqldf("SELECT Species, 'Sepal.Length'
FROM iris_all
LIMIT 10")
#'Create a new variable `Sepal.Area` given by `Sepal.Area = Sepal.Length * Sepal.Width`
#'
#+ message = FALSE, warning = FALSE
sqldf("SELECT `Sepal.Length`, `Sepal.Width`, `Sepal.Length` * `Sepal.Width` AS `Sepal.Area`
FROM iris_all
LIMIT 10")
sqldf("SELECT DISTINCT Species
FROM iris_all")
sqldf("SELECT *
FROM iris_all
WHERE `Sepal.Length` < 4.5")
rm(list=ls())
#'##Importing a csv file into a data.frame using `read.csv.sql`
#'
#'Load libraries
#+
library(sqldf)
#'Set up the path to data
#+ message = F, warning = F
path2data <- file.path(file.choose())
path2data
View(iris)
Miss <- read.csv(file.choose(),na.strings=c(""))
head(Miss,n=13)
tail(Miss)
Miss[,]
view(miss)
view(Miss)
Miss <- read.csv(file.choose(),na.strings=c(""))
view(Miss)
View(Miss)
head(Miss,n=13)
complete.cases(Miss)
Miss[!complete.cases(Miss),]
Miss[is.na(Miss$Expenses),]
#Removing records with missing data
Miss_backup <- Miss
Miss[!complete.cases(Miss),]
Miss[is.na(Miss$Industry),]
Miss<- Miss[!is.na(Miss$Industry),]
Miss[is.na(Miss$Industry),]
Miss<- Miss[!is.na(Miss$Industry),]
Miss<- Miss[!is.na(Miss$Industry),]
#resetting dataframe
rownames(Miss)<-1:nrow(Miss)
#resetting dataframe
rownames(Miss)<-1:nrow(Miss)
Miss[is.na(Miss$State),]
nrow(Miss)
is.na(Miss$Industry)
#resetting dataframe
rownames(Miss)<-1:nrow(Miss)
Miss[is.na(Miss$State),]
Miss[is.na(Miss$State)& Miss$City =="New York",]
Miss[is.na(Miss$State)& Miss$City =="New York","State"] <- "NY"
Miss[is.na(Miss$State)& Miss$City =="San Francisco",]
Miss[is.na(Miss$State)& Miss$City =="San Francisco","State"] <- "CA"
View(Miss)
Miss[is.na(Miss$State)& Miss$City =="San Francisco","State"] <- "CA"
View(Miss)
Miss[is.na(Miss$Employees),]
median(Miss[,"Employees"],na.rm = T)
Emp_med_retail <- median(Miss[Miss$Industry=="Retail","Employees"],na.rm = T)
Miss[is.na(Miss$Employees) & Miss$Industry =="Retail",]
Miss[is.na(Miss$Employees) & Miss$Industry =="Retail","Employees"] <-Emp_med_retail
Miss[is.na(Miss$Employees),]
Miss[is.na(Miss$Employees),]
#getting the library
library(ggplot2);head(diamonds);names(diamonds)
library(ggplot2
library(ggplot2)
install.packages("GGPLOT2")
install.packages("ggplot2")
install.packages(c("dplyr", "Rcpp", "rlang"))
install.packages(c("Rcpp", "rlang"))
install.packages("d")
dose <- c(20,30,40,45,60)
druga <- c(16, 20,27,50,60)
drugb <- c(15,18,25,31,40)
opar <- par(no.readonly = TRUE)
par(pin=c(2,3))
par(lwd=2, cex=1.5)
par(cex.axis=.75, font.axis=3)
plot(dose,druga,type = "b", pch=19, lty=2, col="red")
plot(dose, drugb, type="b", pch=23, lty=6. col="blue", bg="green")
plot(dose, drugb, type="b", pch=23, lty=3, col="blue", bg="green")
par(cex.axis=.75, font.axis=3)
plot(dose,druga,type = "b", pch=19, lty=2, col="red")
plot(dose, drugb, type="b", pch=23, lty=3, col="blue", bg="green")
plot(dose, drugb, type="b", pch=23, lty=3, col="blue", bg="green")
plot(dose,druga,type = "b", pch=19, lty=2, col="red")
plot(dose, drugb, type="b", pch=23, lty=3, col="blue", bg="green")
R code
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13","gapminder","Lahman"))
install.packages(c("nycflights13","gapminder","Lahman"))
1+2
dput(mtcars)
mtcars <- structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), row.names = c("Mazda RX4", "Mazda RX4 Wag",
"Datsun 710", "Hornet 4 Drive", "Hornet Sportabout", "Valiant",
"Duster 360", "Merc 240D", "Merc 230", "Merc 280", "Merc 280C",
"Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
dput(mtcars)
source('~/Acadgild/Sample order.R')
source('~/Acadgild/Sample order.R')
source('~/Acadgild/Sampleorder.R')
dput(mtcars)
source('~/Acadgild/Sampleorder.R')
source('~/Acadgild/Sampleorder.R')
install.packages("tidyverse")
source('~/Acadgild/Sampleorder.R')
library(tidyverse)
mpg
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)
dput(mtcars)
row(mtcars)
source('~/Acadgild/Sampleorder.R')
install.packages("tidyverse")
source('~/Acadgild/Sampleorder.R')
install.packages("tidyverse")
str(mtcars)
dput(mtcars)
ggplot(data=mpg)+
geom_point(mapping = aes(x=hwy, y=cyl))
library(tidyverse)
ggplot(data=mpg)+
geom_point(mapping = aes(x=hwy, y=cyl))
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))
ggplot(data=mpg)+
geom_point(mapping = aes(x=class, y=drv))
x<-mpg(class)
View(mpg,"class")
View((mpg,"drv"))
View(mpg,"drv")
source('~/Acadgild/Sampleorder.R')
install.packages("tidyverse")
source('~/Acadgild/Sampleorder.R')
install.packages("tidyverse")
library(ggplot2)
data("diamonds")
View(diamonds)
help(diamonds)
#An "aesthetic" is a dimension of a graph that we can perceive visually:
ggplot(diamonds,aes(carat,price))+geom_point()
gg <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
gg
ggplot(diamonds,aes(x=carat, y=price)) + geom_line()
#To add an aesthetic, "color=clarity", using clarity, which is a measure of the clarity of each diamond, to color our points.
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=color)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=clarity, size=cut)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=clarity, shape=cut)) + geom_point()
#add additional layer using the plus sign.
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE, method="lm")
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point() + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~ clarity)
#~ expalined by
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + facet_grid(color ~ clarity)
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot")
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)")
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)") + xlim(0, 2)
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)") + ylim(0, 10000)
ggplot(diamonds, aes(x=price)) + geom_histogram()
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=2000)
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=200) + facet_wrap(~ clarity)
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=200) + facet_wrap(~ clarity, scale="free_y")
ggplot(diamonds, aes(x=price, fill=clarity)) + geom_histogram()
#One common method in statistics for comparing multiple densities is to use a boxplot.
#A boxplot has two attributes: an x, which is usually a classification into categories
#and y, the actual variable that you're comparing.
ggplot(diamonds, aes(x=color, y=price)) + geom_boxplot()
install.packages("rjson")
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file.path())
result <- fromJSON(file = "input.json")
# Print the result.
print(result)
# Print the result.
print(result)
result <- fromJSON(file = "input.json")
# Print the result.
print(result)
# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(result)
print(json_data_frame)
setwd("C:\Users\Harish\Documents\Json")
setwd("Users\Harish\Documents\Json")
getwd()
setwd("Users\Harish\Documents\Json")
setwd("Users\harish\Documents\Json")
setwd("Users/Desktop/json")
setwd("~/Json")
file.path(file.choose())
temp = list.files(pattern="text*.")
json_file <- "myfiles"
out <- jsonlite::fromJSON(json_file)
# Load the package required to read JSON files.
library("rjson")
#load packages from Json directory
txt1<- fromJSON()
#load packages from Json directory
txt1<- fromJSON()
#load packages from Json directory
txt1<- fromJSON()
result <- fromJSON(file = "Parse.json")
filenames <- list.files("C:\Users\Harish\Documents\Json", pattern="*.json", full.names=TRUE)
filenames <- list.files("C:/Users/Harish/Documents/Json", pattern="*.json", full.names=TRUE)
data <- read.csv("data/meaneducation.csv")
library(dplyr)
data <- read.csv("data/meaneducation.csv")
data <- read.csv("data\meaneducation.csv")
